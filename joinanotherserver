  
    local DelaySeconds = 1
local ServerListLimit = 100

function RejoinNewServer(teleportDelay: number?,serverLimit: number?)
	teleportDelay = teleportDelay or 1
	serverLimit = serverLimit or 100
	local url = ("https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=Asc&limit=%s"):format(game.PlaceId,tostring(serverLimit))

	local Response = syn.request({
		Url = url,
		Method = "GET"
	})

	local currJobId = game.JobId
	local newJobId = nil
	local justInCase = 0
	local respJson = game:GetService("HttpService"):JSONDecode(Response.Body)
	for i,v in pairs(respJson) do
		if (i == "data" and v and #v > 0) then
			while (justInCase < serverLimit and (newJobId == nil or newJobId == currJobId)) do
				justInCase = justInCase + 1
				local sel = math.random(1,#v)
				newJobId = v[sel].id
			end
		end
	end

	if (newJobId ~= nil) then
		local ts = game:GetService('TeleportService')
		local p = nil
		pcall(function()
			p = game:GetService("Players").LocalPlayer
			p:Kick(('---------------------------------------Joining New server please wait instance in %ss.'):format(tostring(teleportDelay)))
		end)
		if (teleportDelay > 0) then
			wait(teleportDelay)
		end
		ts:TeleportToPlaceInstance(game.PlaceId,newJobId,p)
		print("tele  
    local DelaySeconds = 1
local ServerListLimit = 100

function RejoinNewServer(teleportDelay: number?,serverLimit: number?)
	teleportDelay = teleportDelay or 1
	serverLimit = serverLimit or 100
	local url = ("https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=Asc&limit=%s"):format(game.PlaceId,tostring(serverLimit))

	local Response = syn.request({
		Url = url,
		Method = "GET"
	})

	local currJobId = game.JobId
	local newJobId = nil
	local justInCase = 0
	local respJson = game:GetService("HttpService"):JSONDecode(Response.Body)
	for i,v in pairs(respJson) do
		if (i == "data" and v and #v > 0) then
			while (justInCase < serverLimit and (newJobId == nil or newJobId == currJobId)) do
				justInCase = justInCase + 1
				local sel = math.random(1,#v)
				newJobId = v[sel].id
			end
		end
	end

	if (newJobId ~= nil) then
		local ts = game:GetService('TeleportService')
		local p = nil
		pcall(function()
			p = game:GetService("Players").LocalPlayer
			p:Kick(('---------------------------------------Joining New server please wait instance in %ss.'):format(tostring(teleportDelay)))
		end)
		if (teleportDelay > 0) then
			wait(teleportDelay)
		end
		ts:TeleportToPlaceInstance(game.PlaceId,newJobId,p)
		print("teleported")
	else
		print("failed to get new jobid")
	end
end

RejoinNewServer(DelaySeconds,ServerListLimit)
ported")
	else
		print("failed to get new jobid")
	end
end

RejoinNewServer(DelaySeconds,ServerListLimit)
